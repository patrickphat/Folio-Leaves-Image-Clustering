{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Experiment-2-Hog-transform","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"-6CjSHAXOJiR","colab_type":"code","outputId":"d359443d-4cf9-49c3-aef2-4eb057a6d7df","executionInfo":{"status":"ok","timestamp":1561619624704,"user_tz":-420,"elapsed":765,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive/')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive/; to attempt to forcibly remount, call drive.mount(\"/content/gdrive/\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"X1tHPatxgtrj","colab_type":"text"},"source":["# Import libraries"]},{"cell_type":"code","metadata":{"id":"a9dh7dA5O17q","colab_type":"code","colab":{}},"source":["import os\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"o9ADWW3YPDj3","colab_type":"code","outputId":"9319b66c-8f05-4c10-eb89-c17e5febf097","executionInfo":{"status":"ok","timestamp":1561619696101,"user_tz":-420,"elapsed":596,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["path = \"/content/gdrive/My Drive/Folio\"\n","folder = os.listdir(path)\n","folder[0].split(' ')[0]"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1'"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"NmyCdX8ygqlR","colab_type":"text"},"source":["# Sort folder"]},{"cell_type":"code","metadata":{"id":"pJ6443uuPba9","colab_type":"code","outputId":"56ebdf33-a9f8-4916-a63c-84a5188d5dee","executionInfo":{"status":"ok","timestamp":1561481244761,"user_tz":-420,"elapsed":683,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["img = cv2.imread(os.path.join(path,folder[0]))\n","img.shape"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4128, 2322, 3)"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"-u9hPmCq_fWT","colab_type":"text"},"source":["A class for storing and loading images"]},{"cell_type":"code","metadata":{"id":"ChYLSJSbWqY9","colab_type":"code","colab":{}},"source":["class ImageHolder:\n","  def __init__(self):\n","    self.img = np.empty((0,128,128,3)).astype('uint8')\n","    self.labels = np.empty((0))\n","  def load_data(self,path):\n","    count = 0\n","    folder = os.listdir(path)\n","    folder.sort(key=lambda x:int(x[:2]))\n","    for filename in folder:\n","      print(count)\n","      count+=1\n","      temp_img = np.array([cv2.resize(cv2.imread(os.path.join(path,filename)),(128,128))]).astype('uint8')      \n","      self.img = np.r_[self.img,temp_img] \n","      self.labels = np.r_[self.labels,int(filename.split(' ')[0])]\n","    return self"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6i58Cy6inf8B","colab_type":"text"},"source":["ImageHolder().load_data(path) chỉ cần chạy 1 lần (đã chạy)"]},{"cell_type":"code","metadata":{"id":"2yCpBkwCXmxz","colab_type":"code","colab":{}},"source":["# ImgHolder = ImageHolder().load_data(path)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jxdHoIEgsgb9","colab_type":"code","colab":{}},"source":["def save_obj(var,file_name):\n","  import pickle\n","  with open(file_name+'.pkl','wb') as handle:\n","    pickle.dump(var,handle,protocol=pickle.HIGHEST_PROTOCOL)\n","  \n","def load_obj(file_name):\n","  import pickle\n","  with open(file_name + '.pkl','rb') as handle:\n","    return pickle.load(handle)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rjLcw9BpzzwC","colab_type":"code","colab":{}},"source":["img_holder = load_obj(\"/content/gdrive/My Drive/imgholder/ImgHolder\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ypIoC4kGXlsg","colab_type":"code","colab":{}},"source":["from skimage.feature import hog"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"g6zm12giXryX","colab_type":"code","outputId":"75d92e84-427e-4522-e1af-fe17ebd183b9","executionInfo":{"status":"ok","timestamp":1561481258876,"user_tz":-420,"elapsed":865,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":286}},"source":["pic = img_holder.img\n","hog_i = hog(pic[2], visualize=True, multichannel=True)\n","plt.imshow(hog_i[1])\n","hog_i[0].shape\n","axis, plt.subplots()"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(15876,)"]},"metadata":{"tags":[]},"execution_count":38},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"avgTYEqVYVBV","colab_type":"code","outputId":"9cd81436-cc53-4bc0-d547-052b978bd037","executionInfo":{"status":"ok","timestamp":1561481261459,"user_tz":-420,"elapsed":708,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["hog_var = np.empty((0, 15876))\n","hog_var.shape"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0, 15876)"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"id":"TI_50d7ybM7W","colab_type":"code","outputId":"9e8fdd71-dc18-4f4f-fdb5-b7b3baedc374","executionInfo":{"status":"ok","timestamp":1561481275198,"user_tz":-420,"elapsed":13791,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["for i in range(pic.shape[0]):\n","    hog_i = hog(pic[i], visualize=False, multichannel=True)\n","    hog_var = np.append(hog_var, [hog_i], axis=0)\n","hog_var.shape"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(637, 15876)"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"lFm2tH3NUqdo","colab_type":"code","colab":{}},"source":["from sklearn.cluster import KMeans, DBSCAN, SpectralClustering, Birch, AgglomerativeClustering\n","from sklearn.metrics import homogeneity_completeness_v_measure as hcv"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cT6MYBEtBhov","colab_type":"text"},"source":["KMeans"]},{"cell_type":"code","metadata":{"id":"c-q18vMldxBY","colab_type":"code","outputId":"2fbc1ed4-69fa-46c0-9c6c-702c9084c02e","executionInfo":{"status":"ok","timestamp":1561471194855,"user_tz":-420,"elapsed":33075,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":235}},"source":["kmeans = KMeans(n_clusters=32)\n","kmeans_fit = kmeans.fit(hog_var)\n","ans = kmeans_fit.cluster_centers_[kmeans_fit.labels_]\n","ans"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.15723325, 0.05224563, 0.07688342, ..., 0.08478656, 0.0477888 ,\n","        0.03586939],\n","       [0.15723325, 0.05224563, 0.07688342, ..., 0.08478656, 0.0477888 ,\n","        0.03586939],\n","       [0.15723325, 0.05224563, 0.07688342, ..., 0.08478656, 0.0477888 ,\n","        0.03586939],\n","       ...,\n","       [0.17084127, 0.0514812 , 0.0817364 , ..., 0.10314353, 0.08998185,\n","        0.04710626],\n","       [0.17535206, 0.06866973, 0.08122988, ..., 0.07819687, 0.07551937,\n","        0.04671559],\n","       [0.17021665, 0.07425285, 0.08051316, ..., 0.08255066, 0.08887194,\n","        0.04655234]])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"OjUdGQldeZxm","colab_type":"code","outputId":"90e9c6b8-3171-4162-bcaf-f1e1560f1372","executionInfo":{"status":"ok","timestamp":1561471194857,"user_tz":-420,"elapsed":23779,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":655}},"source":["kmeans_fit.labels_"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 8,  8,  8,  8,  8, 22,  8,  8, 22,  8,  8,  8,  8,  8,  8,  8,  8,\n","        8,  8,  8, 26,  5, 26, 26, 26, 26, 26,  5, 26, 26, 26, 26,  8, 26,\n","        3, 26, 26,  1,  5, 26, 21,  2,  2,  2,  2, 20, 20,  2, 20, 16, 16,\n","       16, 16, 16, 16, 16, 16, 10, 16, 16,  4,  8,  4,  1,  8,  4,  4,  4,\n","        4,  4,  3,  8,  3,  4,  4,  4,  4,  8,  3,  8, 23,  2, 23, 23, 23,\n","       23,  9, 21, 23, 23, 23, 23, 23, 23, 23, 21, 23, 23, 23, 23,  1,  1,\n","        1,  1,  1,  1, 12,  1,  1,  1,  1,  1,  1, 30, 14,  1,  1,  1,  1,\n","        3, 21,  6, 11, 11, 11, 11, 11, 11, 11, 31,  6,  6,  6,  6, 11,  6,\n","        6,  6, 11, 21,  3, 28, 22, 28,  0,  0, 28, 18,  0, 28,  0,  0, 22,\n","        0,  3, 28, 28, 28, 28, 28, 21, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","       19, 19, 19, 19, 19,  6, 19, 19, 19,  0, 20,  2, 11, 11,  2,  2, 23,\n","        2, 11,  6, 23,  9, 23, 25, 25, 25, 25, 25, 14, 25, 12, 12,  5,  1,\n","        1,  1,  1,  1,  1, 31, 13,  5,  1,  1, 31,  5, 13,  1, 12,  8, 30,\n","       12, 12, 12, 12, 30, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 12, 12,\n","       30, 30, 11, 21, 11, 21,  6,  6, 21, 21,  6, 21,  6,  0,  0,  0,  0,\n","        0,  0,  0, 30,  0,  2,  2, 20,  2, 20,  2,  2, 26, 18,  8, 22, 18,\n","       18, 18, 26, 22, 10, 18, 14, 18, 18, 14, 14, 14, 14, 14, 14, 14, 14,\n","       14, 14, 14, 14, 14, 14, 18, 14, 14, 21,  6,  6,  6,  6,  6, 11,  6,\n","        6, 21,  6, 21,  6, 21,  6,  6, 21,  6,  6,  6, 10, 10, 10, 10, 10,\n","       10, 16, 10, 10, 10, 10, 16, 10, 16, 10, 10, 10, 10, 10, 10, 30,  1,\n","        1,  1,  1,  1,  1, 12,  1,  1,  1, 12,  1,  1,  1,  1,  1, 12, 17,\n","       12, 27, 27,  3, 27, 27,  2, 21, 20, 20,  2, 27,  6,  2,  2, 27, 27,\n","       27, 27, 27, 27, 17,  9, 31,  9, 31, 31,  9, 31,  3,  9, 31,  9,  5,\n","        9,  9,  9, 31, 31, 31, 31,  5, 26,  3,  3, 18,  3,  3,  3,  1, 26,\n","        3, 26, 18, 22, 26,  3, 26,  3,  3,  3, 30, 30, 30, 30, 30, 30, 30,\n","       12, 30, 30, 30,  5, 30, 30, 30, 30,  3,  5, 30,  3, 22, 22, 22, 18,\n","       22, 22,  8,  4, 22, 22,  8, 22, 22,  8, 22, 22, 22, 22,  4,  2, 19,\n","       19, 19, 29, 15, 29, 15, 29, 15, 29, 29, 29, 15, 29, 15, 15, 15, 29,\n","       15, 13, 31, 13, 13,  5, 13, 12,  1, 13, 12,  1,  1, 31, 13,  1, 13,\n","        5, 31, 13, 13, 17, 17, 17, 17, 17, 17, 17,  9, 17, 17, 17, 17, 17,\n","        5, 17, 17, 17, 17, 17,  1, 20, 20, 20, 20, 20, 26, 20, 20, 20, 20,\n","       20, 20, 25, 28,  8, 25, 26, 22, 22, 16, 12,  1,  9, 31,  1, 31,  1,\n","        3,  1, 17, 31, 31,  1, 31,  9,  1, 17,  1, 31,  5,  5,  5,  5,  5,\n","        5,  5,  5, 30, 31,  5,  5,  5,  5, 28,  5,  5,  5,  5,  5,  5, 28,\n","        4,  4, 24, 24, 24, 24, 24,  4, 24, 24, 24, 10, 24,  3, 24,  3,  4,\n","        4, 24,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,\n","        7,  7,  7,  7,  7, 22, 26, 22, 22, 22, 18,  8, 22, 22, 26, 22, 18,\n","       22, 22,  8, 18, 18, 26, 22, 18], dtype=int32)"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"IgP79P9mwtyS","colab_type":"code","outputId":"265a35fc-13f7-4de6-91ab-fdbb9e9f3574","executionInfo":{"status":"ok","timestamp":1561471194863,"user_tz":-420,"elapsed":4437,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":67}},"source":["metric = hcv(img_holder.labels, kmeans_fit.labels_)\n","print('Homogeneity is', metric[0])\n","print('Completeness is', metric[1])\n","print('V measure is', metric[2])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Homogeneity is 0.6772904775441552\n","Completeness is 0.6960870486882649\n","V measure is 0.6865601345781617\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jmHZQ2PELW5u","colab_type":"text"},"source":["DBSCAN"]},{"cell_type":"code","metadata":{"id":"i8PW6i42yiX_","colab_type":"code","outputId":"b57afb24-2c13-4ed2-b987-2a23d4117fdf","executionInfo":{"status":"error","timestamp":1561471199998,"user_tz":-420,"elapsed":7822,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":320}},"source":["dbscan = DBSCAN(eps=9.5, min_samples=2, n_jobs=-1)\n","dbscan_fit = dbscan.fit(hog_var)"],"execution_count":0,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-3b7347ed5b6c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mdbscan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDBSCAN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0meps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m9.5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmin_samples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdbscan_fit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdbscan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhog_var\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/cluster/dbscan_.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    349\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m         clust = dbscan(X, sample_weight=sample_weight,\n\u001b[0;32m--> 351\u001b[0;31m                        **self.get_params())\n\u001b[0m\u001b[1;32m    352\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore_sample_indices_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclust\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore_sample_indices_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/cluster/dbscan_.py\u001b[0m in \u001b[0;36mdbscan\u001b[0;34m(X, eps, min_samples, metric, metric_params, algorithm, leaf_size, p, sample_weight, n_jobs)\u001b[0m\n\u001b[1;32m    173\u001b[0m         \u001b[0;31m# This has worst case O(n^2) memory complexity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m         neighborhoods = neighbors_model.radius_neighbors(X, eps,\n\u001b[0;32m--> 175\u001b[0;31m                                                          return_distance=False)\n\u001b[0m\u001b[1;32m    176\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/neighbors/base.py\u001b[0m in \u001b[0;36mradius_neighbors\u001b[0;34m(self, X, radius, return_distance)\u001b[0m\n\u001b[1;32m    745\u001b[0m             results = Parallel(n_jobs, **parallel_kwargs)(\n\u001b[1;32m    746\u001b[0m                 \u001b[0mdelayed_query\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tree\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mradius\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 747\u001b[0;31m                 \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgen_even_slices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    748\u001b[0m             )\n\u001b[1;32m    749\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 934\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    935\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    936\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    831\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    832\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 833\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    834\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    835\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 638\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    639\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mready\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    633\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    634\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 635\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 551\u001b[0;31m                 \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    552\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    553\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"M7frqQ-QzEar","colab_type":"code","colab":{}},"source":["dbscan_fit.labels_"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m1mJ3dmXsHrE","colab_type":"code","outputId":"bcbed9b5-403e-4ed2-fe23-3891b02968ce","executionInfo":{"status":"ok","timestamp":1561388852983,"user_tz":-420,"elapsed":49702,"user":{"displayName":"Jack Simon","photoUrl":"https://lh3.googleusercontent.com/-SL9Dpkp_R2g/AAAAAAAAAAI/AAAAAAAAAHs/GEcFJNEAqM4/s64/photo.jpg","userId":"18398771309830002606"}},"colab":{"base_uri":"https://localhost:8080/","height":67}},"source":["metric1 = hcv(img_holder.labels, dbscan_fit.labels_)\n","print('Homogeneity is', metric1[0])\n","print('Completeness is', metric1[1])\n","print('V measure is', metric1[2])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Homogeneity is 0.5437785744043222\n","Completeness is 0.693322069048588\n","V measure is 0.6095117455569363\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QXV33zMJOakG","colab_type":"text"},"source":["Grid search (eps range [7, 12], minpts range [2, 5])"]},{"cell_type":"code","metadata":{"id":"NREDTtx0xm2b","colab_type":"code","outputId":"f995d12b-7549-499e-a548-8efcbd1a2c06","executionInfo":{"status":"error","timestamp":1561471256390,"user_tz":-420,"elapsed":48046,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":370}},"source":["max_metric = 0.0\n","a = (0, 0)\n","for esp in np.arange(7.0, 12.0, 0.1):\n","    for minpts in range(2, 6):\n","        dbscan1 = DBSCAN(eps=esp, min_samples=minpts, n_jobs=-1).fit(hog_var)\n","        metric1 = hcv(img_holder.labels, dbscan1.labels_)\n","        if (max_metric < metric1[2]):\n","            max_metric = metric1[2]\n","            a = (esp, minpts)\n","print(max_metric, a)"],"execution_count":0,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-11578a58abb2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mesp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m7.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m12.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mminpts\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m         \u001b[0mdbscan1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDBSCAN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0meps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mesp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmin_samples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mminpts\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhog_var\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0mmetric1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhcv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_holder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdbscan1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmax_metric\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mmetric1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/cluster/dbscan_.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    349\u001b[0m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m         clust = dbscan(X, sample_weight=sample_weight,\n\u001b[0;32m--> 351\u001b[0;31m                        **self.get_params())\n\u001b[0m\u001b[1;32m    352\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore_sample_indices_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclust\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore_sample_indices_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/cluster/dbscan_.py\u001b[0m in \u001b[0;36mdbscan\u001b[0;34m(X, eps, min_samples, metric, metric_params, algorithm, leaf_size, p, sample_weight, n_jobs)\u001b[0m\n\u001b[1;32m    173\u001b[0m         \u001b[0;31m# This has worst case O(n^2) memory complexity\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    174\u001b[0m         neighborhoods = neighbors_model.radius_neighbors(X, eps,\n\u001b[0;32m--> 175\u001b[0;31m                                                          return_distance=False)\n\u001b[0m\u001b[1;32m    176\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msample_weight\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/neighbors/base.py\u001b[0m in \u001b[0;36mradius_neighbors\u001b[0;34m(self, X, radius, return_distance)\u001b[0m\n\u001b[1;32m    745\u001b[0m             results = Parallel(n_jobs, **parallel_kwargs)(\n\u001b[1;32m    746\u001b[0m                 \u001b[0mdelayed_query\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tree\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mradius\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 747\u001b[0;31m                 \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgen_even_slices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    748\u001b[0m             )\n\u001b[1;32m    749\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mreturn_distance\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 934\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    935\u001b[0m             \u001b[0;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    936\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    831\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    832\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'supports_timeout'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 833\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    834\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    835\u001b[0m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mget\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 638\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    639\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mready\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/multiprocessing/pool.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    633\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    634\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 635\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_event\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    549\u001b[0m             \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    550\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 551\u001b[0;31m                 \u001b[0msignaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    552\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0msignaled\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    553\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.6/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    293\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 295\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    296\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    297\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"nf2BCcYMCAKJ","colab_type":"text"},"source":["Spectral Clustering"]},{"cell_type":"code","metadata":{"id":"kYuu1lXKLQPF","colab_type":"code","outputId":"8281bbbd-7ec5-4bb4-d7cb-5a6a7b5889c9","executionInfo":{"status":"ok","timestamp":1561472804578,"user_tz":-420,"elapsed":9860,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":655}},"source":["sc = SpectralClustering(n_clusters=32,\n","                        affinity=\"nearest_neighbors\",\n","                        assign_labels=\"kmeans\",\n","                        random_state=1991,\n","                        eigen_solver=\"arpack\",\n","                        n_jobs=-1).fit(hog_var)\n","sc.labels_"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 2,  2,  2,  2,  2,  2,  2,  2,  4,  2,  2,  2,  2,  6,  2,  2,  2,\n","        2,  2,  2,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  2,  0,  6,  0,\n","       29,  4,  0, 21, 12,  6, 10, 16, 23, 16, 16, 20, 20, 16, 20, 28, 28,\n","       28, 28, 28, 28, 28, 28,  1, 28, 28, 27,  2, 27,  6,  2, 27, 27, 27,\n","       27, 27,  1, 27, 27, 27, 27, 27, 27, 20, 29,  2, 23, 14, 14, 14, 23,\n","       14, 23, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  5,  5,\n","        5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 12,  6,  5,  5,  5,  5,\n","        5,  7, 31,  7,  7,  7,  7,  7,  7,  7, 14, 31, 31, 31, 31,  7, 31,\n","       31, 31,  7,  7, 29,  9,  2,  9,  9,  9,  9,  9,  9,  9,  9,  9,  4,\n","        9, 29,  9,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n","        8,  8,  8,  8,  8,  8,  8,  8,  8,  9, 16, 16, 14, 14, 16, 16, 23,\n","       14, 14, 31, 23, 23, 23,  4, 17, 17,  4, 17, 22,  4,  5, 12, 12, 21,\n","       21, 21,  5,  6,  6, 26, 21, 12,  6,  6, 26, 12, 21,  6, 12,  6,  3,\n","        3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n","        3,  3,  7, 10,  7, 10, 31, 10, 10, 10, 31, 10, 10, 19, 19, 19, 19,\n","       19, 19, 19, 30, 19, 16, 16, 20, 20, 20, 16, 23,  4,  1,  2,  4,  1,\n","        1,  4,  4,  4,  4,  1, 22,  1,  1,  1, 22, 22, 22, 22, 22, 22, 22,\n","        1, 22, 22, 22, 22, 22,  1, 22, 22, 10, 10, 10, 10, 10, 10,  7, 10,\n","       10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 17, 17, 17, 17, 17,\n","       17, 28, 17, 17,  1, 17, 28, 17, 28, 17, 17, 17,  1, 17,  1, 30,  5,\n","        6,  6,  5,  6,  6,  5,  5,  6,  5,  5,  5,  6,  6,  5,  6,  5,  6,\n","        5, 24, 24,  1, 24, 24, 16, 10, 20, 20, 16, 24, 16, 16, 16, 24, 16,\n","       24, 24, 24, 16, 25, 11, 26, 11, 26, 26, 11, 26, 29, 11, 26, 11, 12,\n","       11, 11, 11, 26, 26, 26, 26, 29, 29, 29, 29,  1, 29, 29, 29,  5,  0,\n","       29, 29,  1,  2,  0, 29,  4, 29, 29, 29, 30, 30, 29, 30, 30, 30, 30,\n","        5, 30, 30, 30, 30, 30, 30, 30, 30, 29, 29, 30, 30,  4,  4,  4,  1,\n","        1,  1,  2,  4,  4, 28,  2,  2,  4,  2,  4,  4,  4,  4, 27, 16,  8,\n","        8,  8, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n","       15, 21, 21, 21, 21, 29, 21,  5,  5, 21, 21, 21, 21, 21, 21, 21, 21,\n","       12, 21, 21, 21, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,  6, 25, 25,\n","       12, 25, 25, 25, 25, 25, 21, 20, 20, 20, 20, 20,  4, 20, 20, 20, 20,\n","       20, 20,  4,  1,  4,  4,  4,  4,  4,  1, 12,  6,  6, 21,  6, 26,  6,\n","       29,  5,  6, 25, 26,  5, 26, 25,  5,  6,  6,  6,  6, 12, 12, 12, 12,\n","       12, 12, 12, 30, 21, 12, 12, 12, 12,  9, 12, 12, 12, 12, 12, 12,  1,\n","       27, 13, 13, 13, 13, 13, 13,  4, 13, 13, 13,  4, 13, 29,  1, 29, 27,\n","       13, 13, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n","       18, 18, 18, 18, 18,  4,  4,  4,  1,  4,  1,  2,  4,  4,  4,  4,  1,\n","        4,  4,  2,  1,  1,  4,  4,  1], dtype=int32)"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"o6GLycJsCLlB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":67},"outputId":"e077d777-3fd1-4321-aa4d-6a8fef1e7d70","executionInfo":{"status":"ok","timestamp":1561472896620,"user_tz":-420,"elapsed":726,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}}},"source":["metric2 = hcv(img_holder.labels, sc.labels_)\n","print('Homogeneity is', metric2[0])\n","print('Completeness is', metric2[1])\n","print('V measure is', metric2[2])"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Homogeneity is 0.7189812149376956\n","Completeness is 0.7373639755533303\n","V measure is 0.7280565767733617\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TtlSTRQ4Bbwx","colab_type":"text"},"source":["Birch"]},{"cell_type":"code","metadata":{"id":"bK5EqvZxWIjs","colab_type":"code","outputId":"06f7068c-a215-4033-96e6-ca9f129a8b25","executionInfo":{"status":"ok","timestamp":1561394220653,"user_tz":-420,"elapsed":1107,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":50}},"source":["img_holder.labels[:21]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n","       0., 0., 0., 1.])"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"31P9YZiYVlHN","colab_type":"code","colab":{}},"source":["km = KMeans(n_clusters=1, n_jobs=-1).fit(hog_var[:20])\n","cen = km.cluster_centers_"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"by44p5TUWw2V","colab_type":"code","outputId":"493d21da-a7f5-48b3-8f78-447a5d8d8c15","executionInfo":{"status":"ok","timestamp":1561394510845,"user_tz":-420,"elapsed":1130,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["np.sum((hog_var[:20] - cen)**2)/20"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["49.834841846426954"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"mIzaUV-VVNJ7","colab_type":"code","outputId":"0acd4a31-17b4-4723-89fc-1738b8e94ae2","executionInfo":{"status":"ok","timestamp":1561481601099,"user_tz":-420,"elapsed":3770,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":655}},"source":["birch = Birch(threshold=5.4, branching_factor=21, n_clusters=32).fit(hog_var)\n","birch.labels_"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,\n","        2,  2,  2,  1,  1,  1,  1,  1,  1,  1, 13,  1, 27,  2,  1,  1, 25,\n","       25,  5,  1, 15, 13, 15,  3,  0,  0,  0,  0,  4,  4,  0,  4,  8,  8,\n","        8, 20,  8,  8,  8,  8,  8,  8,  8,  2,  2,  9, 25,  2,  9,  9,  9,\n","        9,  9,  5,  2, 25,  9,  9,  9,  9,  2, 25,  2, 26,  0, 21, 21, 26,\n","       21, 26,  3, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  6,  6,\n","        6,  6,  6,  6,  7,  6,  6,  6,  6,  6,  6, 14, 25,  6,  6,  6,  6,\n","       25,  3,  3,  3,  3,  3,  3,  3,  3,  3, 21,  3,  3,  3,  3,  3,  3,\n","        3,  3,  3,  3, 25, 14,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14,  2,\n","       14,  5, 14, 14, 14, 14, 14, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n","       18, 18, 18, 18, 18, 18, 18, 18, 18, 14,  0,  0, 30, 30,  0,  0, 26,\n","       30, 30,  3, 26, 26, 26, 12, 12, 12, 12, 12, 27, 12,  7, 13, 13, 10,\n","        6, 10, 15,  1,  1, 15,  1,  1,  1, 15, 15, 13, 13,  1, 13,  1, 23,\n","       23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","       23, 23,  3, 24,  3, 24,  3, 24, 24, 24,  3, 24, 24,  7,  7,  7,  7,\n","        7,  7,  7,  7,  7,  0,  0,  0,  4,  4,  0,  0, 12,  5, 12, 12,  5,\n","        5, 12, 12, 12, 12, 12, 27,  5,  5, 25, 27, 27, 27, 27, 27, 27, 27,\n","        5, 27, 27, 27, 27, 27,  5, 27, 27, 24, 24, 24, 24, 24, 24,  3, 24,\n","        3,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 28, 28, 28, 28, 28,\n","       28,  8, 28, 28,  8, 28,  8, 28,  8, 28, 28, 28,  8, 28,  8, 29,  6,\n","        6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 10,  6,  6,  6,  6,  6,  6,\n","        6,  4,  4,  5,  4,  4,  0, 24,  4,  4,  0,  4,  0,  0,  4,  4,  0,\n","        4,  4,  4,  0, 22, 17, 11, 17, 11, 11, 17, 11,  1, 17, 11, 17, 15,\n","       17, 17, 17, 11, 11, 11, 11, 29, 25, 25, 25,  5, 25, 25, 25,  6,  2,\n","       25, 25,  5,  2,  1, 25,  1, 25, 25, 25, 29, 29, 29, 29, 29, 29, 29,\n","        7, 29, 29, 29, 13, 29, 29, 29,  7, 29, 13, 29, 13, 20, 20, 20,  8,\n","        8,  8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  8, 20, 30, 30,\n","       30, 30, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,\n","       16, 10, 10, 10, 10,  6, 10, 10, 10, 10,  7, 10, 10, 10, 10, 10, 10,\n","       13, 10, 10, 10, 15, 22, 22, 22, 15, 22, 22, 22, 22, 22, 22, 22, 22,\n","       13, 22, 22, 15, 22, 22, 10,  4,  4,  4,  4,  4, 12,  4,  4,  4,  4,\n","        4,  4, 12,  5, 12, 12, 12, 12, 12, 12,  7,  1, 11, 11,  1, 11,  1,\n","       25,  5, 11, 11, 15,  6, 11, 22,  6,  1,  1, 11,  1, 13, 13, 13, 13,\n","       13, 13, 13,  7, 10, 13,  7, 25, 13, 14, 13, 13, 13, 13, 13, 13,  5,\n","        9,  9, 31, 31, 31, 31, 31, 25, 31, 31, 31, 28, 31, 25,  5, 25,  9,\n","        9, 31, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","       19, 19, 19, 19, 19, 20, 12, 20,  5, 20,  5,  2, 20, 20, 12, 20,  5,\n","       20, 20,  2,  5,  5, 12, 20,  5])"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"qGNkv-1TjljQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":67},"outputId":"24ed8215-70b7-4f41-d24d-3fb04c53de0a","executionInfo":{"status":"ok","timestamp":1561481627914,"user_tz":-420,"elapsed":819,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}}},"source":["metric3 = hcv(img_holder.labels, birch.labels_)\n","print('Homogeneity is', metric3[0])\n","print('Completeness is', metric3[1])\n","print('V measure is', metric3[2])"],"execution_count":43,"outputs":[{"output_type":"stream","text":["Homogeneity is 0.739113280290706\n","Completeness is 0.7537677539540247\n","V measure is 0.7463685912309438\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ExtVhIGgVsMB","colab_type":"code","outputId":"9f5a80e0-556e-4203-99db-2dfbbc06d52e","executionInfo":{"status":"ok","timestamp":1561475118028,"user_tz":-420,"elapsed":130278,"user":{"displayName":"Nghiem Vu dinh Vi","photoUrl":"","userId":"14206189023124228427"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["max_metric1 = 0.0\n","a1 = (0, 0)\n","for t in np.arange(5, 7, 0.1):\n","    for b in range(20, 23):\n","        birch1 = Birch(threshold=t, branching_factor=b, n_clusters=32).fit(hog_var)\n","        metric_ = hcv(img_holder.labels, birch1.labels_)\n","        if (max_metric1 < metric_[2]):\n","            max_metric1 = metric_[2]\n","            a1 = (t, b)\n","        print(metric_[2], t, b)\n","print(max_metric1, a1)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["0.7175154547418958 5.0 20\n","0.7121898802317167 5.0 21\n","0.7212391899114621 5.0 22\n","0.7388581126205213 5.1 20\n","0.7073286497147738 5.1 21\n","0.703615668165578 5.1 22\n","0.7153510006883137 5.199999999999999 20\n","0.7156614462288339 5.199999999999999 21\n","0.7251545198473528 5.199999999999999 22\n","0.7272831141392359 5.299999999999999 20\n","0.7197922791009602 5.299999999999999 21\n","0.71582462024077 5.299999999999999 22\n","0.733097090959534 5.399999999999999 20\n","0.7463685912309438 5.399999999999999 21\n","0.7412518317578043 5.399999999999999 22\n","0.7320810561699036 5.499999999999998 20\n","0.7172312896130163 5.499999999999998 21\n","0.7106694917788423 5.499999999999998 22\n","0.7169061089233048 5.599999999999998 20\n","0.7130829588076272 5.599999999999998 21\n","0.7286177145022347 5.599999999999998 22\n","0.7402568345327284 5.6999999999999975 20\n","0.7166227611418768 5.6999999999999975 21\n","0.7117890809642442 5.6999999999999975 22\n","0.7202848909152592 5.799999999999997 20\n","0.7232394991288708 5.799999999999997 21\n","0.7117575124098872 5.799999999999997 22\n","0.7245307017820459 5.899999999999997 20\n","0.7294173956292226 5.899999999999997 21\n","0.7172019525360291 5.899999999999997 22\n","0.7120331810008024 5.9999999999999964 20\n","0.7145417233350206 5.9999999999999964 21\n","0.7129412574321744 5.9999999999999964 22\n","0.7247709768298709 6.099999999999996 20\n","0.708958042034092 6.099999999999996 21\n","0.7032846435914488 6.099999999999996 22\n","0.7101104761491508 6.199999999999996 20\n","0.7287294914951342 6.199999999999996 21\n","0.7134779215144271 6.199999999999996 22\n","0.7208119365883848 6.299999999999995 20\n","0.7177135290395368 6.299999999999995 21\n","0.7079890755490342 6.299999999999995 22\n","0.7158483042409906 6.399999999999995 20\n","0.7085171561610618 6.399999999999995 21\n","0.7196945965694406 6.399999999999995 22\n","0.680473239752483 6.499999999999995 20\n","0.681044936699727 6.499999999999995 21\n","0.6873030945611045 6.499999999999995 22\n","0.6926635924165965 6.599999999999994 20\n","0.6636995396736027 6.599999999999994 21\n","0.6814138588069485 6.599999999999994 22\n","0.6761949561534869 6.699999999999994 20\n","0.6720183220918983 6.699999999999994 21\n","0.6984897298439643 6.699999999999994 22\n","0.6729534078489435 6.799999999999994 20\n","0.6754039494382676 6.799999999999994 21\n","0.7012705014936854 6.799999999999994 22\n","0.6912897289970094 6.899999999999993 20\n","0.6635726237603968 6.899999999999993 21\n","0.6652230643125696 6.899999999999993 22\n","0.7463685912309438 (5.399999999999999, 21)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ja1uxLI2Vs5d","colab_type":"code","colab":{}},"source":["metric3 = hcv(img_holder.labels, birch.labels_)\n","print('Homogeneity is', metric3[0])\n","print('Completeness is', metric3[1])\n","print('V measure is', metric3[2])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DgJNhJBqBWa7","colab_type":"text"},"source":["Agglomerative Clustering"]},{"cell_type":"code","metadata":{"id":"XEu7RPxiVtT4","colab_type":"code","outputId":"ca5698b3-0261-4f1b-842c-4a688d267fb5","executionInfo":{"status":"ok","timestamp":1561389112658,"user_tz":-420,"elapsed":3460,"user":{"displayName":"Jack Simon","photoUrl":"https://lh3.googleusercontent.com/-SL9Dpkp_R2g/AAAAAAAAAAI/AAAAAAAAAHs/GEcFJNEAqM4/s64/photo.jpg","userId":"18398771309830002606"}},"colab":{"base_uri":"https://localhost:8080/","height":655}},"source":["ac = AgglomerativeClustering(n_clusters=32).fit(hog_var)\n","ac.labels_"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,\n","        0,  0,  0, 17,  4, 17, 17, 17, 17, 17,  4, 17, 17,  0, 17,  0, 17,\n","        2,  2, 17,  7,  4,  9,  5, 11, 11, 11, 11, 29, 29, 11, 11, 27, 27,\n","       27,  6, 27, 27, 27, 27, 24, 27, 27, 22, 22, 22,  1,  0, 22, 22, 22,\n","        2, 22,  2, 22,  2, 22, 22, 22,  2, 22,  2, 22, 11, 21, 21, 21, 11,\n","       21, 11,  5, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  1,  1,\n","        1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 13,  0,  1,  1,  1,  1,\n","        1, 31,  3,  3,  3,  3,  3, 31, 31, 31, 21,  3,  3,  3,  3,  3,  3,\n","        3,  3, 31, 31,  1, 15,  0, 15, 15, 15, 15, 15, 15, 15, 15, 15,  0,\n","       15,  2, 15, 15, 15, 15, 15,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,\n","        5,  5,  5,  5,  5,  5,  5,  5,  5, 15, 29, 11,  5,  5, 21, 25, 11,\n","        5,  5,  5, 11, 11, 11,  6,  6,  6,  6,  6, 28,  6,  1,  4,  4,  7,\n","        1,  7,  1,  9,  9, 26,  4,  4,  9,  4, 26,  4,  4,  9,  4,  9,  8,\n","        8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,\n","        8,  8, 31, 12, 31, 12,  3, 12, 12, 12,  3, 12, 12, 30, 30, 30, 30,\n","       30, 30, 30,  8, 30, 25, 25, 11, 11, 11, 25, 11,  0, 24,  0,  6, 24,\n","        2, 16, 16, 16,  6, 16, 28, 24, 24, 24, 28, 28, 28, 28, 28, 28, 28,\n","        2, 28, 28, 28, 28, 28, 24, 28, 28, 12, 12, 12, 12, 12, 12,  3, 12,\n","        3, 12, 12, 12, 12, 12, 12, 12, 31, 12, 12, 12,  6,  6,  6,  6,  6,\n","        6,  6,  6,  6, 24,  6,  6,  6,  6,  6,  6,  6, 24,  6, 24, 13,  1,\n","        1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,\n","        1, 20, 20,  2, 20, 20, 25, 25, 29, 29, 25, 20, 25, 25, 29, 20, 20,\n","       20, 20, 20, 20, 23, 19, 26, 19, 26, 26, 19, 26,  2, 19, 26, 19,  4,\n","       19, 19, 19, 26, 26, 26, 26, 13,  2,  2,  2, 24,  2,  2, 13,  1,  0,\n","        2, 17,  2,  0, 17,  2, 17,  2,  2,  2, 13, 13, 13, 13, 13, 13, 13,\n","        8, 13, 13, 13, 13, 13, 13, 13,  8, 13, 13, 13, 13, 16, 16, 16, 24,\n","       24, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 16,  5,  5,\n","        5,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n","       14,  7,  7,  7,  7, 13,  8,  1,  7,  7,  8,  7,  7,  7,  7,  7,  7,\n","        4,  7,  7,  7, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","        4, 23, 23, 23, 23, 23,  7, 29, 29, 29, 29, 29,  0, 29, 29, 29, 29,\n","       29, 29,  6, 24,  0,  6,  0,  6,  6, 24,  4,  1,  9, 26,  9, 26,  1,\n","        2,  2,  9, 26, 26,  2, 26, 23,  2,  9,  1,  9,  4,  4,  4,  4,  4,\n","        4,  4,  4,  4,  7,  4,  4,  4,  4, 15,  4,  4,  4,  4,  4,  4,  2,\n","       10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  0, 10,  2,  2,  2, 10,\n","       10, 10, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,\n","       18, 18, 18, 18, 18, 16, 16,  0,  2, 16, 24,  0, 16, 16,  0, 16, 24,\n","       16, 16,  0, 24, 24,  0, 16, 24])"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"uGufdVVOWh_p","colab_type":"code","outputId":"aaba7cd0-d062-445f-cea7-5e74970bad9e","executionInfo":{"status":"ok","timestamp":1561389112660,"user_tz":-420,"elapsed":2806,"user":{"displayName":"Jack Simon","photoUrl":"https://lh3.googleusercontent.com/-SL9Dpkp_R2g/AAAAAAAAAAI/AAAAAAAAAHs/GEcFJNEAqM4/s64/photo.jpg","userId":"18398771309830002606"}},"colab":{"base_uri":"https://localhost:8080/","height":67}},"source":["metric4 = hcv(img_holder.labels, ac.labels_)\n","print('Homogeneity is', metric4[0])\n","print('Completeness is', metric4[1])\n","print('V measure is', metric4[2])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Homogeneity is 0.7338987198344648\n","Completeness is 0.7544392288620178\n","V measure is 0.744027234862434\n"],"name":"stdout"}]}]}